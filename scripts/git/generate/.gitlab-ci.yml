image: go1com/ci-php:php7

# Predefined scopes
.autoscale-runner: &autoscale-runner
  retry: 1
  tags:
    - autoscale

.setup-ssh-agent: &setup-ssh-agent
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

stages:
  - build
  - test
  - package
  - deploy
  - dev
  - release
  - staging
  - production

build:composer:
  stage: build
  tags: ["php7", "phpunit", "composer"]
  cache: { paths: ["vendor/"] }
  artifacts: { paths: ["vendor/"] }
  script: composer install -q --no-dev
  except:
    - "tags"

test:lint:
  stage: test
  tags: ["php7", "phpunit"]
  script: find domain controller App.php -name '*.inc' -o -name '*.php' -print0 | xargs -0 -n1 php -l
  except:
    - "tags"

test:phpunit:
  stage: test
  tags: ["php7", "phpunit", "composer"]
  script: phpunit --coverage-text --colors=never
  except:
    - "tags"

package:docker:
  image: go1com/ci-deploy
  stage: package
  <<: *autoscale-runner
  <<: *setup-ssh-agent
  script:
    - export TAG_NAME=`date +"%Y%m%d"`-${CI_PIPELINE_ID}
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:$TAG_NAME
    - docker push $CI_REGISTRY_IMAGE:$TAG_NAME
  only: ["master", "/^hotfix-.*$/"]
  except:
    - "tags"
  dependencies:
    - build:composer

deploy:master:
  image: go1com/ci-deploy
  stage: dev
  <<: *autoscale-runner
  environment:
    name: master
    url: https://api-dev.go1.co/xxxxx-service/
  variables:
    SERVICE_TAGS: "dev"
    SERVICE_80_NAME: "xxxxx"
    MEM: 64M
    DOCKER_TAG: "master"
    _DOCKER_ENV: "dev"
  script:
    - ecs-cli configure --region ${AWS_DEFAULT_REGION} --access-key ${AWS_ACCESS_KEY_ID} --secret-key ${AWS_SECRET_ACCESS_KEY} --cluster staging
    - ecs-cli compose --file docker-compose.yml --project-name xxxxx-dev service up
    # - wget https://github.com/go1com/deploy_helper/releases/download/v0.5.1/deploy-helper.phar
    # - php deploy-helper.phar service:update xxxxx dev
  only: ["master"]
  dependencies:
    - package:docker

create:releasetag:
  stage: release
  <<: *autoscale-runner
  script:
    - export TAG_NAME=`date +"%Y%m%d"`-${CI_PIPELINE_ID}
    - 'curl -i -XPOST -H "PRIVATE-TOKEN: $GITLAB_TOKEN" -H "SUDO: $GITLAB_USER_LOGIN" "https://code.go1.com.au/api/v4/projects/$CI_PROJECT_ID/repository/tags?tag_name=$TAG_NAME&ref=$CI_COMMIT_SHA"'
  only: ["master", "/^hotfix-.*$/"]

deploy:staging:
  image: go1com/ci-deploy
  stage: staging
  <<: *autoscale-runner
  variables:
    SERVICE_TAGS: "staging"
    SERVICE_80_NAME: "xxxxx"
    MEM: 64M
    _DOCKER_ENV: "staging"
  environment:
    name: staging
    url: https://api-staging.go1.co/xxxxx-service/
  script:
    - export DOCKER_TAG=${CI_COMMIT_TAG}
    - echo "Deploy Staging service using Dockerimage ${DOCKER_TAG}"
    - ecs-cli configure --region ${AWS_DEFAULT_REGION} --access-key ${AWS_ACCESS_KEY_ID} --secret-key ${AWS_SECRET_ACCESS_KEY} --cluster staging
    - ecs-cli compose --file docker-compose.yml --project-name xxxxx-staging service up
    # - wget https://github.com/go1com/deploy_helper/releases/download/v0.5.1/deploy-helper.phar
    # - php deploy-helper.phar service:update xxxxx staging
  when: manual
  only: ["tags"]

deploy:production:
  image: go1com/ci-deploy
  stage: production
  <<: *autoscale-runner
  variables:
    SERVICE_TAGS: "production"
    SERVICE_80_NAME: "xxxxx"
    MEM: 128M
    _DOCKER_ENV: "production"
  environment:
    name: production
    url: https://api.go1.co/xxxxx-service/
  script:
    - export DOCKER_TAG=${CI_COMMIT_TAG}
    - echo "Deploy Production service using Dockerimage ${DOCKER_TAG}"
    - ecs-cli configure --region ${AWS_DEFAULT_REGION} --access-key ${AWS_ACCESS_KEY_ID} --secret-key ${AWS_SECRET_ACCESS_KEY} --cluster production
    - ecs-cli compose --file docker-compose.yml --project-name xxxxx-production service up
    # - wget https://github.com/go1com/deploy_helper/releases/download/v0.5.1/deploy-helper.phar
    # - php deploy-helper.phar service:update xxxxx production
  when: manual
  only: ["tags"]
